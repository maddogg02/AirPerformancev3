import { useState, useRef } from "react";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue, SelectGroup, SelectLabel } from "@/components/ui/select";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { ProButton } from "@/components/ui/pro-button";
import { Save, Zap, Lightbulb, Target, Loader2, Plus, Trash2, X } from "lucide-react";
import { cn } from "@/lib/utils";
import type { PerformanceCategory, ActionVerb, UserProfile } from "@/types";
import { IMPACT_OPTIONS } from "@/types";
import { getAFSCPreset } from "@/lib/profile";
import { useProfile } from "@/hooks/useProfile";
import { usePerformanceEntries } from "@/hooks/usePerformanceEntries";
import { useAIGeneration } from "@/hooks/useAIGeneration";
import { useCustomTemplates } from "@/hooks/useCustomTemplates";
import { useToast } from "@/hooks/use-toast";

const actionVerbs: ActionVerb[] = ['Led', 'Executed', 'Developed', 'Improved', 'Managed', 'Trained', 'Implemented', 'Supported', 'Optimized', 'Resolved', 'Coordinated', 'Delivered'];
const categories: PerformanceCategory[] = ['Mission Execution', 'Leading People', 'Improving the Unit', 'Managing Resources'];

// Contextual tips based on category (ALQ/MPA)
const CATEGORY_TIPS: Record<PerformanceCategory, string> = {
  'Mission Execution': "Tip: Focus on mission readiness, sorties, or capability gained.",
  'Leading People': "Tip: Focus on Airmen development, morale, or leadership impact.",
  'Improving the Unit': "Tip: Focus on efficiency, compliance, or innovation.",
  'Managing Resources': "Tip: Focus on money, time, manpower, or risk saved."
};

// Category-aware result templates
const RESULT_TEMPLATES: Record<PerformanceCategory, string[]> = {
  'Mission Execution': ["enabled sorties", "expanded operational capability", "increased mission readiness"],
  'Leading People': ["developed Airmen", "expanded training coverage", "improved team morale"],
  'Improving the Unit': ["streamlined processes", "boosted training efficiency", "reduced errors"],
  'Managing Resources': ["saved resources", "optimized funding", "reduced operational costs"]
};

// Result wizard options
const BENEFICIARY_OPTIONS = ['Self', 'Team', 'Unit', 'Mission'];
const OUTCOME_OPTIONS = ['Readiness ↑', 'Efficiency ↑', 'Cost ↓', 'Risk ↓', 'Training ↑'];

export function AddWinScreen() {
  const [action, setAction] = useState("");
  const [impact, setImpact] = useState("");
  const [result, setResult] = useState("");
  const [category, setCategory] = useState<PerformanceCategory>('Mission Execution');
  const [showResultWizard, setShowResultWizard] = useState(false);
  const [wizardBeneficiary, setWizardBeneficiary] = useState("");
  const [wizardOutcome, setWizardOutcome] = useState("");
  const [showAITemplates, setShowAITemplates] = useState(false);
  const [aiTemplates, setAiTemplates] = useState<string[]>([]);
  const [showManualTemplates, setShowManualTemplates] = useState(false);
  const [newCustomTemplate, setNewCustomTemplate] = useState("");
  const [isAddingTemplate, setIsAddingTemplate] = useState(false);
  
  const { profile } = useProfile();
  const { addEntry } = usePerformanceEntries();
  const { toast } = useToast();
  const { generateResultTemplates, isGenerating } = useAIGeneration();
  const { 
    templates: customTemplates, 
    addTemplate, 
    deleteTemplate, 
    getTemplatesByCategory,
    isLoading: isLoadingTemplates 
  } = useCustomTemplates();
  
  const actionRef = useRef<HTMLTextAreaElement>(null);
  const impactRef = useRef<HTMLTextAreaElement>(null);
  const resultRef = useRef<HTMLTextAreaElement>(null);

  const afscPreset = profile ? getAFSCPreset(profile.afsc, profile.shred) : null;

  const handleActionSelect = (verb: ActionVerb) => {
    const currentAction = action || "";
    const newAction = currentAction.length > 0 ? `${currentAction} ${verb}` : verb;
    setAction(newAction);
    actionRef.current?.focus();
  };

  const handleImpactSelect = (impactValue: string) => {
    const currentImpact = impact || "";
    const newImpact = currentImpact.length > 0 ? `${currentImpact} ${impactValue}` : impactValue;
    setImpact(newImpact);
    impactRef.current?.focus();
  };

  const canSave = action.trim().length > 0 || impact.trim().length > 0;
  const resultLength = result.length;
  const hasCompleteAIR = action.trim() && impact.trim() && result.trim();

  const handleResultTemplateSelect = (template: string) => {
    setResult(`…${template}`);
    resultRef.current?.focus();
  };

  const generateWizardResult = () => {
    if (wizardBeneficiary && wizardOutcome) {
      const outcomeMap: Record<string, string> = {
        'Readiness ↑': 'improved readiness',
        'Efficiency ↑': 'boosted efficiency', 
        'Cost ↓': 'reduced costs',
        'Risk ↓': 'mitigated risks',
        'Training ↑': 'enhanced training'
      };
      const beneficiaryMap: Record<string, string> = {
        'Self': 'personal',
        'Team': 'team',
        'Unit': 'unit',
        'Mission': 'mission'
      };
      
      const resultText = `…${outcomeMap[wizardOutcome]} for ${beneficiaryMap[wizardBeneficiary]}`;
      setResult(resultText);
      setShowResultWizard(false);
      setWizardBeneficiary("");
      setWizardOutcome("");
      resultRef.current?.focus();
    }
  };

  const handleGenerateAITemplates = async () => {
    if (!action.trim() || !impact.trim()) {
      toast({
        title: "Missing Information",
        description: "Please fill in Action and Impact first to generate AI templates.",
        variant: "destructive"
      });
      return;
    }

    try {
      setShowAITemplates(true);
      const templates = await generateResultTemplates(category, {
        action: action.trim(),
        impact: impact.trim(),
        afscDescription: afscPreset?.afsc,
        skillLevel: profile?.skillLevel,
        rank: profile?.rank
      });

      if (templates && Array.isArray(templates.options)) {
        setAiTemplates(templates.options);
      } else {
        setAiTemplates([]);
        toast({
          title: "No Templates Generated",
          description: "Unable to generate AI templates. Try the manual templates instead.",
          variant: "destructive"
        });
      }
    } catch (error) {
      console.error('Error generating AI templates:', error);
      setAiTemplates([]);
      toast({
        title: "Generation Failed",
        description: "Unable to generate AI templates. Try the manual templates instead.",
        variant: "destructive"
      });
    }
  };

  const handleAddCustomTemplate = async () => {
    if (!newCustomTemplate.trim()) {
      toast({
        title: "Empty Template",
        description: "Please enter a template before adding.",
        variant: "destructive"
      });
      return;
    }

    if (newCustomTemplate.length > 120) {
      toast({
        title: "Template Too Long",
        description: "Templates must be 120 characters or less.",
        variant: "destructive"
      });
      return;
    }

    setIsAddingTemplate(true);
    const success = await addTemplate(category, newCustomTemplate);
    if (success) {
      setNewCustomTemplate("");
    }
    setIsAddingTemplate(false);
  };

  const handleDeleteCustomTemplate = async (id: string) => {
    await deleteTemplate(id);
  };

  // Visual stitching preview
  const getAIRPreview = () => {
    if (!action.trim() && !impact.trim() && !result.trim()) return null;
    
    const parts = [];
    if (action.trim()) parts.push(action.trim());
    if (impact.trim()) parts.push(impact.trim());
    if (result.trim()) parts.push(result.trim());
    
    return parts.join('; ');
  };

  const handleSave = async () => {
    if (!canSave) return;
    
    // If result is empty, show wizard
    if (!result.trim()) {
      setShowResultWizard(true);
      return;
    }
    
    try {
      const success = await addEntry({
        action,
        impact,
        result,
        category: category as any
      });
      
      if (success) {
        toast({
          title: "Win saved!",
          description: "Your performance entry has been added to your library.",
        });
        
        // Reset form
        setAction("");
        setImpact("");
        setResult("");
        setCategory('Mission Execution');
      }
    } catch (error) {
      console.error('Error saving entry:', error);
      toast({
        title: "Error",
        description: "Failed to save your entry. Please try again.",
        variant: "destructive",
      });
    }
  };

  return (
    <div className="min-h-screen bg-background pb-20 px-4 pt-6">
      <div className="max-w-md mx-auto space-y-6">
        {/* Header */}
        <div className="relative text-center">
          <h1 className="text-2xl font-bold text-foreground">Add Performance Win</h1>
          <p className="text-sm text-muted-foreground">Capture your Action-Impact-Result in under 20 seconds</p>
          <div className="absolute right-0 top-0">
            <ProButton />
          </div>
        </div>

        {/* Major Performance Area Selection */}
        <Card className="gradient-card">
          <CardHeader className="pb-4">
            <CardTitle className="text-lg flex items-center gap-2">
              <Target className="w-5 h-5 text-primary" />
              Major Performance Area
            </CardTitle>
          </CardHeader>
          <CardContent>
            <Select value={category} onValueChange={(value: PerformanceCategory) => setCategory(value)}>
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {categories.map((cat) => (
                  <SelectItem key={cat} value={cat}>
                    {cat}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </CardContent>
        </Card>

        {/* AIR Form */}
        <Card className="gradient-card">
          <CardHeader className="pb-4">
            <CardTitle className="text-lg flex items-center gap-2">
              <Zap className="w-5 h-5 text-primary" />
              Performance Entry
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* Action Input */}
            <div className="space-y-3">
              <label className="text-sm font-medium text-foreground">Action *</label>
              <Select onValueChange={(value: ActionVerb) => handleActionSelect(value)}>
                <SelectTrigger className="w-full">
                  <SelectValue placeholder="Select an action verb to insert" />
                </SelectTrigger>
                <SelectContent>
                  {actionVerbs.map((verb) => (
                    <SelectItem key={verb} value={verb}>
                      {verb}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <Textarea
                ref={actionRef}
                value={action}
                onChange={(e) => setAction(e.target.value)}
                placeholder="What did you do? Start with an action verb..."
                className="min-h-[80px] resize-none"
              />
            </div>

            {/* Impact Input */}
            <div className="space-y-3">
              <label className="text-sm font-medium text-foreground">Impact *</label>
              <Select onValueChange={(value: string) => handleImpactSelect(value)}>
                <SelectTrigger className="w-full">
                  <SelectValue placeholder="Select an impact type to insert" />
                </SelectTrigger>
                <SelectContent>
                  {IMPACT_OPTIONS.map((category) => (
                    <SelectGroup key={category.category}>
                      <SelectLabel>{category.category}</SelectLabel>
                      {category.values.map((value) => (
                        <SelectItem key={value} value={value}>
                          {value}
                        </SelectItem>
                      ))}
                    </SelectGroup>
                  ))}
                </SelectContent>
              </Select>
              <Textarea
                ref={impactRef}
                value={impact}
                onChange={(e) => setImpact(e.target.value)}
                placeholder="What was the measurable impact? Include metrics..."
                className="min-h-[80px] resize-none"
              />
            </div>

            {/* Result Input */}
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <label className="text-sm font-medium text-foreground">Result</label>
                <div className="flex gap-2">
                  <Button
                    variant="ghost"
                    size="sm"
                    className="text-xs text-muted-foreground flex items-center gap-1"
                    onClick={handleGenerateAITemplates}
                    disabled={isGenerating || !action.trim() || !impact.trim()}
                  >
                    {isGenerating ? (
                      <Loader2 className="w-3 h-3 animate-spin" />
                    ) : (
                      <Zap className="w-3 h-3" />
                    )}
                    AI Templates
                  </Button>
                  <Dialog>
                    <DialogTrigger asChild>
                      <Button
                        variant="ghost"
                        size="sm"
                        className="text-xs text-muted-foreground flex items-center gap-1"
                        onClick={() => setShowManualTemplates(true)}
                      >
                        <Lightbulb className="w-3 h-3" />
                        Manual Templates
                      </Button>
                    </DialogTrigger>
                    <DialogContent className="max-w-sm max-h-[80vh] overflow-y-auto">
                      <DialogHeader>
                        <DialogTitle className="text-base">Result Templates</DialogTitle>
                      </DialogHeader>
                      <div className="space-y-4">
                        <p className="text-sm text-muted-foreground">
                          Templates for <Badge variant="outline" className="text-xs">{category}</Badge>
                        </p>
                        
                        {/* Default Templates */}
                        <div className="space-y-2">
                          <h4 className="text-sm font-medium text-muted-foreground">Default Templates</h4>
                          {RESULT_TEMPLATES[category].map((template, index) => (
                            <Button
                              key={index}
                              variant="outline"
                              size="sm"
                              className="w-full justify-start text-left h-auto py-2 px-3"
                              onClick={() => handleResultTemplateSelect(template)}
                            >
                              …{template}
                            </Button>
                          ))}
                        </div>

                        {/* Custom Templates */}
                        <div className="space-y-2">
                          <div className="flex items-center justify-between">
                            <h4 className="text-sm font-medium text-muted-foreground">Your Custom Templates</h4>
                            {getTemplatesByCategory(category).length > 0 && (
                              <Badge variant="outline" className="text-xs">
                                {getTemplatesByCategory(category).length}
                              </Badge>
                            )}
                          </div>
                          
                          {isLoadingTemplates ? (
                            <div className="flex items-center justify-center py-4">
                              <Loader2 className="w-4 h-4 animate-spin" />
                            </div>
                          ) : getTemplatesByCategory(category).length > 0 ? (
                            getTemplatesByCategory(category).map((template) => (
                              <div key={template.id} className="flex items-center gap-2">
                                <Button
                                  variant="outline"
                                  size="sm"
                                  className="flex-1 justify-start text-left h-auto py-2 px-3"
                                  onClick={() => {
                                    handleResultTemplateSelect(template.template_text);
                                    setShowManualTemplates(false);
                                  }}
                                >
                                  …{template.template_text}
                                </Button>
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  className="px-2 text-destructive"
                                  onClick={() => handleDeleteCustomTemplate(template.id)}
                                >
                                  <Trash2 className="w-3 h-3" />
                                </Button>
                              </div>
                            ))
                          ) : (
                            <p className="text-xs text-muted-foreground text-center py-2">
                              No custom templates yet
                            </p>
                          )}
                        </div>

                        {/* Add New Template */}
                        <div className="space-y-2 pt-2 border-t">
                          <h4 className="text-sm font-medium text-muted-foreground">Add New Template</h4>
                          <div className="flex gap-2">
                            <Input
                              value={newCustomTemplate}
                              onChange={(e) => setNewCustomTemplate(e.target.value)}
                              placeholder="Enter template text..."
                              className="text-sm"
                              maxLength={120}
                            />
                            <Button
                              onClick={handleAddCustomTemplate}
                              disabled={isAddingTemplate || !newCustomTemplate.trim()}
                              size="sm"
                              variant="default"
                            >
                              {isAddingTemplate ? (
                                <Loader2 className="w-3 h-3 animate-spin" />
                              ) : (
                                <Plus className="w-3 h-3" />
                              )}
                            </Button>
                          </div>
                          <p className="text-xs text-muted-foreground">
                            {newCustomTemplate.length}/120 characters
                          </p>
                        </div>
                      </div>
                    </DialogContent>
                  </Dialog>
                </div>
              </div>
              
              <Textarea
                ref={resultRef}
                value={result}
                onChange={(e) => setResult(e.target.value)}
                placeholder="So what? What changed for the mission, team, or unit?"
                className="min-h-[80px] resize-none"
              />
              
              {/* Contextual Tip */}
              <div className="flex items-start gap-2 p-3 bg-muted/50 rounded-md">
                <Target className="w-4 h-4 text-primary mt-0.5 flex-shrink-0" />
                <p className="text-xs text-muted-foreground">{CATEGORY_TIPS[category]}</p>
              </div>
              
              <div className="text-xs text-muted-foreground text-right">
                {resultLength} characters
              </div>
            </div>
            
            {/* Visual AIR Preview */}
            {getAIRPreview() && (
              <div className="space-y-2">
                <label className="text-xs font-medium text-muted-foreground">Preview</label>
                <div className="p-3 bg-primary/5 border border-primary/10 rounded-md">
                  <p className="text-sm text-foreground/80 italic">"{getAIRPreview()}"</p>
                </div>
              </div>
            )}

          </CardContent>
        </Card>

        {/* Save Button */}
        <Button
          onClick={handleSave}
          disabled={!canSave}
          variant="military"
          size="xl"
          className="w-full"
        >
          <Save className="w-5 h-5" />
          Save Performance Win
        </Button>

        {!canSave && (
          <p className="text-xs text-center text-muted-foreground">
            Must have at least Action or Impact to save
          </p>
        )}
      </div>

      {/* AI Templates Dialog */}
      <Dialog open={showAITemplates} onOpenChange={setShowAITemplates}>
        <DialogContent className="max-w-sm">
          <DialogHeader>
            <DialogTitle className="text-base flex items-center gap-2">
              <Zap className="w-4 h-4 text-primary" />
              AI Result Templates
            </DialogTitle>
          </DialogHeader>
          <div className="space-y-3">
            <p className="text-sm text-muted-foreground">
              AI-generated templates based on your action and impact for <Badge variant="outline" className="text-xs">{category}</Badge>
            </p>
            {isGenerating ? (
              <div className="flex items-center justify-center py-8">
                <Loader2 className="w-6 h-6 animate-spin text-primary" />
                <span className="ml-2 text-sm text-muted-foreground">Generating templates...</span>
              </div>
            ) : aiTemplates.length > 0 ? (
              <div className="space-y-2">
                {aiTemplates.map((template, index) => (
                  <Button
                    key={index}
                    variant="outline"
                    size="sm"
                    className="w-full justify-start text-left h-auto py-2 px-3"
                    onClick={() => {
                      handleResultTemplateSelect(template.replace(/^\.\.\./, ''));
                      setShowAITemplates(false);
                    }}
                  >
                    {template}
                  </Button>
                ))}
              </div>
            ) : (
              <div className="text-center py-4 text-sm text-muted-foreground">
                No templates generated. Try adjusting your action and impact.
              </div>
            )}
          </div>
        </DialogContent>
      </Dialog>

      {/* Result Wizard Dialog */}
      <Dialog open={showResultWizard} onOpenChange={setShowResultWizard}>
        <DialogContent className="max-w-sm">
          <DialogHeader>
            <DialogTitle className="text-base">Result Helper</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <p className="text-sm text-muted-foreground">
              Let's create a result statement together:
            </p>
            
            {/* Who benefited? */}
            <div className="space-y-2">
              <label className="text-sm font-medium">Who benefited?</label>
              <div className="grid grid-cols-2 gap-2">
                {BENEFICIARY_OPTIONS.map((option) => (
                  <Button
                    key={option}
                    variant={wizardBeneficiary === option ? "default" : "outline"}
                    size="sm"
                    onClick={() => setWizardBeneficiary(option)}
                    className="text-xs"
                  >
                    {option}
                  </Button>
                ))}
              </div>
            </div>

            {/* How? */}
            <div className="space-y-2">
              <label className="text-sm font-medium">How?</label>
              <div className="grid grid-cols-1 gap-2">
                {OUTCOME_OPTIONS.map((option) => (
                  <Button
                    key={option}
                    variant={wizardOutcome === option ? "default" : "outline"}
                    size="sm"
                    onClick={() => setWizardOutcome(option)}
                    className="text-xs justify-start"
                  >
                    {option}
                  </Button>
                ))}
              </div>
            </div>

            {/* Generate Button */}
            <div className="flex gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => setShowResultWizard(false)}
                className="flex-1"
              >
                Skip
              </Button>
              <Button
                onClick={generateWizardResult}
                disabled={!wizardBeneficiary || !wizardOutcome}
                size="sm"
                className="flex-1"
              >
                Generate Result
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}